name: 'Production Deployment'

on:
  push:
    branches:
    - master
    paths:
    - 'iac/**'
    - '.github/workflows/prod_pipeline.yml'
  pull_request:
    paths:
    - 'iac/**'
    - '.github/workflows/prod_pipeline.yml'

jobs:
  prd:
    environment: prd
    name: 'Terraform Prod'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    # using bash and the iac folder by default
    defaults:
      run:
        shell: bash
        working-directory: ./iac

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize the prod backend
    - name: Terraform Init
      run: terraform init -backend-config=prd.backend.hcl

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

    # On push to master, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.event_name == 'push'
      run: terraform apply -auto-approve
